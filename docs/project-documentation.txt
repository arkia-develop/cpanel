# Admin Panel Project Documentation

## Project Structure
```
cpanel/
├── api/                    # Backend API endpoints
│   ├── auth.php           # Authentication handling
│   ├── users.json         # User database
│   └── jwt.php            # JWT token handling
├── js/                    # Frontend JavaScript files
│   ├── auth.js            # Authentication logic
│   ├── dashboard.js       # Dashboard functionality
│   ├── articles.js        # Articles management
│   ├── services.js        # Services management
│   └── portfolio.js       # Portfolio management
├── css/                   # Stylesheets
│   └── dashboard.css      # Dashboard styles
└── dashboard.html         # Main dashboard interface
```

## Authentication System

### 1. Login Flow
1. User enters credentials in login form
2. `auth.js` sends POST request to `api/auth.php`
3. `auth.php` validates credentials against `users.json`
4. If valid, generates JWT token and returns user data
5. Frontend stores token in localStorage and redirects to dashboard

### 2. Key Functions

#### auth.js
- `handleLogin(e)`: 
  - Handles login form submission
  - Sends credentials to server
  - Stores token and user data on success
  - Shows error messages on failure

- `isAuthenticated()`:
  - Checks if user has valid token
  - Used for route protection

- `getAuthHeaders()`:
  - Generates headers with JWT token
  - Used for authenticated API requests

- `handleLogout()`:
  - Removes token and user data
  - Redirects to login page

#### auth.php
- `checkAuth()`:
  - Validates JWT token
  - Used to protect API endpoints
  - Returns decoded user data if valid

- Login Handler:
  - Validates user credentials
  - Generates JWT token
  - Returns user data and token

## Dashboard System

### 1. Content Loading
1. Dashboard checks authentication
2. Loads initial statistics
3. Sets up event listeners
4. Loads content based on navigation

### 2. Key Functions

#### dashboard.js
- `loadDashboard()`:
  - Loads dashboard statistics
  - Updates counters
  - Shows recent activities

- `handleNavigation()`:
  - Manages sidebar navigation
  - Loads different content sections

## Data Management

### 1. Articles Management
- CRUD operations for articles
- Image upload handling
- Status management

### 2. Services Management
- Service creation and editing
- Status tracking
- Description management

### 3. Portfolio Management
- Project management
- Image handling
- Status tracking

## Security Features

### 1. JWT Authentication
- Token-based authentication
- Secure password hashing
- Token expiration handling

### 2. API Protection
- All API endpoints require valid token
- CORS protection
- Input validation

## File Relationships

### 1. Frontend-Backend Communication
- `auth.js` ↔ `auth.php`: Authentication
- `dashboard.js` ↔ API endpoints: Data loading
- `articles.js` ↔ API endpoints: Article management
- `services.js` ↔ API endpoints: Service management

### 2. Data Flow
1. User action triggers JavaScript function
2. Function makes API request with auth token
3. Backend validates request and processes data
4. Response sent back to frontend
5. Frontend updates UI accordingly

## Error Handling

### 1. Frontend
- Form validation
- API error handling
- User feedback
- Loading states

### 2. Backend
- Input validation
- Database errors
- Authentication errors
- File operation errors

## Best Practices Implemented

1. Security:
   - Password hashing
   - JWT authentication
   - Input sanitization
   - CORS protection

2. Code Organization:
   - Modular JavaScript
   - Separated concerns
   - Clear file structure

3. User Experience:
   - Loading indicators
   - Error messages
   - Responsive design
   - Intuitive navigation

## How to Extend

### 1. Adding New Features
1. Create necessary API endpoints
2. Add frontend JavaScript handlers
3. Update UI components
4. Implement error handling

### 2. Modifying Existing Features
1. Locate relevant files
2. Update functionality
3. Test thoroughly
4. Update documentation

## Common Issues and Solutions

1. Authentication Issues:
   - Check token storage
   - Verify API endpoints
   - Check CORS settings

2. Data Loading Issues:
   - Verify API responses
   - Check error handling
   - Validate data format

3. UI Issues:
   - Check CSS loading
   - Verify JavaScript execution
   - Test responsive design 